디자인 패턴

소프트웨어를 설계할 때 특정 맥락에서 자주 발생하는 고질적인 문제들이 또 발생했을 때 재사용할 할 수있는 훌륭한 해결책
https://gmlwjd9405.github.io/2018/07/06/design-pattern.html

디자인 패턴의 구조
콘텍스트 
- 문제가 발생하는 여어 상황을 기술한다. 즉 패턴이 적용될 수 있는 상황을 나타낸다.
- 경우에 따라서는 패턴이 유용하지 못한 상황을 나타내기도 한다.

문제
- 패턴이 적용되어 해결될 필요가 있는 여러 디자인 이슈들을 기술한다.
- 이때 여러 제약 사항과 영향력도 문제 해결을 위해 고려해야 한다.

해결
- 문제를 해결하도록 설계를 구성하는 요소들과 그 요소들 사이의 관계, 책임, 협력 관계를 기술 한다.
- 해결은 반드시 구체적인 구현 방법이나, 언어에 의존적이 않으며, 다양한 상황에 적용할 수 있는 일종의 템플릿이다.

디자인 패턴의 종류

분류
- 생성 패턴
 - 객체 생성에 관련된 패턴
 - 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받ㅌ지 않도록 유연성을 제공한다.
 - 대표적으로 추상팩토리, 팩토리메서드, 싱글턴 패턴이 있다.
 - 이외) 빌더패턴, 프로토타입패턴 

- 구조 패턴
 - 클래스나 객체를 조합해 더 큰 구조를 만드는 패턴
 - 예를 들어 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴
 - 대표적으로 컴퍼지트, 데커레이터 패턴이 있다.
 - 이외) 어댑터패턴, 브리지패턴, 퍼사드패턴, 플라이웨이트패턴, 프록시패턴
 
- 행위 패턴
 - 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴
 - 한 객체가 혼자 수행할 수 없는 작업을 여러개의 객체로 어떻게 분배하는지, 또 그렇게 하면서도 객체 사이의 결합도를 최소화 하는 것에 중점을 둔다.
 - 대표적으로 옵저버, 스테이트, 스트래티지, 템플릿메서드, 커맨드 패턴이 있다.
 - 이외) 책임연쇄패턴, 인터프리터패턴, 이터레이터패턴, 미디에이터패턴, 메멘토패턴, 비지터 패턴

